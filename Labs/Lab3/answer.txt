Summary:

Answer to Lab 3 in Algorithms.

Answers: 

9. Yes, it works. It only calls the destructor of class Monkey, which means 
	m = a;
	worked, and no constructor/function is called, because it is just assigning pointers, no real object is made or changed.
	It worked because m is pointing to an ape, a is pointing to a human, human is the derived class of ape, so it can be assigned to the ape.


14. h = a doesn't work because the constructor is saying: "I can't assign a parent class (ape) to a child class (human), becasue human contains 	comething ape doesn't have. "
	In order to make it work, use dynamic casting, telling the constructor that "I know the real object is a human, so just point to a human."


18. (1) I made another two classes, diamondParrot(derived class from Monkey) and diamondHuman(hybrid class from diamondParrot and Ape).
	The new diamond graph is:
							Monkey
						   /      \
						Ape  	diamondParrot
						   \	  /
						   diamondHuman

	And I found that, when calling the constructor of diamondHuman, it calls CTOR of Ape -> Monkey, then -> Ape -> diamondHuman, 
	-> diamondParrot -> Monkey -> diamondHuman.

	So it prints out: Monkey, Ape, Monkey, diamondParrot, diamondHuman

	(2) I made another function, void hasABrain(void), to test the functionality of virtual function along the inheritence chain.
		hasABrain() is not virtual in class Monkey, but virtual in class Ape. When I do: 

		m = diamondHumanP;
		It returns an error saying that the Monkey class is ambiguous here. (That's actually the case I am most interested about, however it doesn't allow me to do so.)

		For: 
		a = diamondHumanP;
		a->hasABrain();

		It prints out the result: call ONLY the diamondHuman class, which proved what we learned in class.


20 & 21: Written in code, and tested in main().